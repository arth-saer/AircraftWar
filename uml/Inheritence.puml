@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
 }


class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:int
    - {static} heroAircraft:HeroAircraft
    + {static} getHeroAircraft():HeroAircraft
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + increaseHp(int increase):void
    + shoot():List<BaseBullet>
}
HeroAircraft --> HeroAircraft
AbstractAircraft <|-- HeroAircraft

class EnemyAircraft{
    + EnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
}
AbstractAircraft <|-- EnemyAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}
EnemyAircraft <|-- MobEnemy

class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int
    - propFactory:PropFactory
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + dropProp():List<BaseProp>
}
EliteEnemy --> PropFactory
EnemyAircraft <|-- EliteEnemy

interface EnemyFactory
{
    + {abstract} createEnemy():EnemyAircraft
}

class MobEnemyFactory
{
    + createEnemy():EnemyAircraft
}
EnemyFactory <|.. EliteEnemyFactory
EnemyFactory <|.. MobEnemyFactory

class EliteEnemyFactory
{
    + createEnemy():EnemyAircraft
}

EnemyFactory ..> EnemyAircraft

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet


abstract class BaseProp{
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + {abstract} Effect(HeroAircraft heroAircraft):void
}

BaseProp ..> HeroAircraft

class AddHpProp{
    - increase:int
    + AddHpProp(int locationX, int locationY, int speedX, int speedY)
    + Effect(HeroAircraft heroAircraft):void
}

class BombProp{
    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + Effect(HeroAircraft heroAircraft):void
}

class FireProp{
    + FireProp(int locationX, int locationY, int speedX, int speedY)
    + Effect(HeroAircraft heroAircraft):void
}

BaseProp <|-- AddHpProp
BaseProp <|-- BombProp
BaseProp <|-- FireProp

interface PropFactory
{
    + {abstract} createProp():BaseProp
}

class AddHpPropFactory
{
    + createProp():BaseProp
}
class BombPropFactory
{
    + createProp():BaseProp
}
class FirePropFactory
{
    + createProp():BaseProp
}

PropFactory <|.. AddHpPropFactory
PropFactory <|.. BombPropFactory
PropFactory <|.. FirePropFactory

PropFactory ..> BaseProp

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- BaseProp

@enduml