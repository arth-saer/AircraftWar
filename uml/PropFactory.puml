@startuml
'https://plantuml.com/class-diagram

abstract class BaseProp{
    + {static} voiceSwitch:boolean
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + {abstract} Effect():void
}


class AddHpProp{
    + AddHpProp(int locationX, int locationY, int speedX, int speedY)
    + Effect():void
}

class BombProp{
    - observers:List<BombObserver>
    + BombObserver(int locationX, int locationY, int speedX, int speedY):void
    + addObserver(BombObserver observer):void
    + notifyObservers():int
    + Effect():void
}

class FireProp{
    + FireProp(int locationX, int locationY, int speedX, int speedY)
    + Effect():void
}
class FirePlusProp{
    + FirePlusProp(int locationX, int locationY, int speedX, int speedY)
    + Effect():void
}

class ShieldProp{
    + ShieldProp(int locationX, int locationY, int speedX, int speedY)
    + Effect():void
}

BaseProp <|-up- AddHpProp
BaseProp <|-down- BombProp
BaseProp <|-up- FireProp
BaseProp <|-down- FirePlusProp
BaseProp <|-left- ShieldProp

interface PropFactory
{
    + {abstract} createProp(int locationX, int locationY, int speedX, int speedY):BaseProp
}

class AddHpPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY):BaseProp
}
class BombPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY):BaseProp
}
class FirePropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY):BaseProp
}
class FirePlusPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY):BaseProp
}
class ShieldPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY):BaseProp
}

PropFactory <|.up. AddHpPropFactory
PropFactory <|.down. BombPropFactory
PropFactory <|.up. FirePropFactory
PropFactory <|.down. FirePlusPropFactory
PropFactory <|.right. ShieldPropFactory

PropFactory .left.> BaseProp

'AddHpPropFactory ..> AddHpProp
'BombPropFactory ..> BombProp
'FirePropFactory ..> FireProp
@enduml